class rsmSalesFillRateController extends SysOperationServiceController
{
    private rsmSalesFillRateContract contract;
    private rsmSalesFillRateTmp tempTable;
    
    protected void new(rsmSalesFillRateContract _contract)
    {
        super(_contract);
        contract = _contract;
    }

    public static rsmSalesFillRateController construct(rsmSalesFillRateContract _contract)
    {
        return new rsmSalesFillRateController(_contract);
    }

    public void run()
    {
        Query                   query = new Query();
        QueryBuildDataSource   salesLineDS;
        QueryBuildDataSource   custInvoiceTransDS;
        SalesLine              salesLine;
        CustInvoiceTrans       custInvoiceTrans;
        
        // Create main query
        salesLineDS = query.addDataSource(tableNum(SalesLine));
        salesLineDS.addRange(fieldNum(SalesLine, DeliveryDate)).value(queryRange(contract.parmFromDate(), contract.parmToDate()));
        
        if (contract.parmCustAccount())
        {
            salesLineDS.addRange(fieldNum(SalesLine, CustAccount)).value(contract.parmCustAccount());
        }
        
        if (contract.parmSiteId())
        {
            salesLineDS.addRange(fieldNum(SalesLine, InventSiteId)).value(contract.parmSiteId());
        }
        
        // Join with CustInvoiceTrans
        custInvoiceTransDS = salesLineDS.addDataSource(tableNum(CustInvoiceTrans));
        custInvoiceTransDS.relations(true);
        custInvoiceTransDS.joinMode(JoinMode::InnerJoin);
        custInvoiceTransDS.addLink(fieldNum(CustInvoiceTrans, InventTransId), fieldNum(SalesLine, InventTransId));
        
        // Process results
        while select salesLine
            joins custInvoiceTrans
            where salesLine.Status == SalesStatus::Delivered
            from query
        {
            this.processSalesLine(salesLine, custInvoiceTrans);
        }
    }

    private void processSalesLine(SalesLine _salesLine, CustInvoiceTrans _custInvoiceTrans)
    {
        tempTable = rsmSalesFillRateTmp::construct();
        
        tempTable.CustomerAccount = _salesLine.CustAccount;
        tempTable.SalesId = _salesLine.SalesId;
        tempTable.ItemId = _salesLine.ItemId;
        tempTable.OrderedQty = _salesLine.OrderedQty;
        tempTable.ShippedQty = _custInvoiceTrans.Qty;
        tempTable.BackorderQty = _salesLine.OrderedQty - _custInvoiceTrans.Qty;
        tempTable.FillRatePct = (_custInvoiceTrans.Qty / _salesLine.OrderedQty) * 100;
        tempTable.PromisedDate = _salesLine.DeliveryDate;
        tempTable.ActualShipDate = _custInvoiceTrans.TransDate;
        tempTable.SalesUnit = _salesLine.SalesUnit;
        
        tempTable.insert();
    }

    public QueryRun getQueryRun()
    {
        Query query = new Query();
        query.addDataSource(tableNum(rsmSalesFillRateTmp));
        return new QueryRun(query);
    }
} 